{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["colorMap","lineMap","App","props","onMouseDown","e","isDrawing","pos","getCurrentMousePos","startX","x","startY","y","mouseUp","prevWidth","prevHeight","draw","state","mode","buttons","ctx","beginPath","lineWidth","lineWeight","strokeStyle","color","moveTo","lineTo","closePath","stroke","bugMode","clearRect","canvas","width","height","bFill","fillStyle","fillColor","fillRect","rect","onLineSelect","line","setState","onColorSelect","colorHex","onFillSelect","onPencilMode","onRectangleMode","onEraseMode","onClear","onBugMode","dpr","window","devicePixelRatio","this","refs","getBoundingClientRect","canvasTop","top","canvasLeft","left","getContext","scale","clientX","clientY","className","id","style","marginTop","paddingRight","src","process","alt","display","ref","onMouseMove","onMouseUp","onClick","marginBottom","marginLeft","textAlign","paddingLeft","type","onChange","value","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.987e5817.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nlet colorMap = {\n  '#000000': 'Black',\n  '#ff0000': 'Red',\n  '#00ff00': 'Green',\n  '#0000ff': 'Blue',\n  '#ffffff': 'None'\n}\n\nlet lineMap = {\n  '1': '1',\n  '3': '2',\n  '7': '3',\n  '12': '4'\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lineWeight: 1,\n      color: '#000000',\n      fillColor: '#ffffff',\n      bFill: false,\n      mode: 'pencil',\n      bugMode: false\n    };\n    let ctx = '';\n    let canvasTop = 0;\n    let canvasLeft = 0;\n    let isDrawing = false;\n    let startX = 0;\n    let startY = 0;\n    let prevWidth = 0;\n    let prevHeight = 0;\n  }  \n\n  componentDidMount() {\n    let dpr = window.devicePixelRatio || 2;\n    let canvas = this.refs.canvas;\n    let rect = canvas.getBoundingClientRect();\n    canvas.width = rect.width * dpr;\n    canvas.height = rect.height * dpr;\n    this.canvasTop = rect.top;\n    this.canvasLeft = rect.left;\n    this.ctx = canvas.getContext('2d');\n    this.ctx.scale(dpr, dpr);\n  }\n\n  getCurrentMousePos(e) {\n    return {\n        x: e.clientX - this.canvasLeft,\n        y: e.clientY - this.canvasTop\n    };\n  }\n\n  onMouseDown = (e) => {\n    this.isDrawing = true;\n    let pos = this.getCurrentMousePos(e);\n    this.startX = pos.x;\n    this.startY = pos.y;\n  }\n\n  mouseUp = (e) => {\n    this.isDrawing = false;\n    this.startX = 0;\n    this.startY = 0;\n    this.prevWidth = 0;\n    this.prevHeight = 0;\n  }\n\n  draw = (e) => {\n    if (this.state.mode === 'pencil') {\n      if (this.isDrawing === true) {\n        // mouse left button must be pressed\n        if (e.buttons !== 1) { \n          return;\n        }\n\n        this.ctx.beginPath(); // begin\n        this.ctx.lineWidth = this.state.lineWeight;\n        this.ctx.strokeStyle  = this.state.color;\n        this.ctx.moveTo(this.startX, this.startY); // from\n        let pos = this.getCurrentMousePos(e);\n        this.ctx.lineTo(pos.x, pos.y); // to\n        this.ctx.closePath();\n        this.ctx.stroke();\n\n        this.startX = pos.x;\n        this.startY = pos.y;\n      }\n    }\n    else if (this.state.mode === 'rectangle') {\n      if (this.isDrawing === true) {\n        if (e.buttons !== 1) { \n          return;\n        }\n\n        let pos = this.getCurrentMousePos(e);\n\n        //clear the whole canvas, or just what we've previously drawn\n        if (this.state.bugMode) {                                                            //clear partial canvas\n          // this is a brute force-ish approach that has bugs - especially with larger line widths \n          // there must be better way...\n          if ((pos.x > this.startX) && (pos.y < this.startY)) {\n            //Quadrant \n            this.ctx.clearRect(this.startX - ((this.state.lineWeight / 2) + .2), \n                               this.startY + ((this.state.lineWeight / 2) + .2),\n                               this.prevWidth + (this.state.lineWeight * 1.32),\n                               this.prevHeight - (this.state.lineWeight * 1.32)); \n          }\n          else if ((pos.x > this.startX) && (pos.y > this.startY)) {\n            //Quadrant 4\n            this.ctx.clearRect(this.startX - ((this.state.lineWeight / 2) + .3), \n                               this.startY - ((this.state.lineWeight / 2) + .3),\n                               this.prevWidth + (this.state.lineWeight * 1.63),\n                               this.prevHeight + (this.state.lineWeight * 1.63)); \n          }\n          else if ((pos.x < this.startX) && (pos.y < this.startY)) {\n            //Quadrant 2\n            this.ctx.clearRect(this.startX + ((this.state.lineWeight / 2) + .3), \n                               this.startY + ((this.state.lineWeight / 2) + .3),\n                               this.prevWidth - (this.state.lineWeight * 1.63),\n                               this.prevHeight - (this.state.lineWeight * 1.63)); \n          }\n          else if ((pos.x < this.startX) && (pos.y > this.startY)) {\n            //Quadrant 3\n            this.ctx.clearRect(this.startX + ((this.state.lineWeight / 2) + .3), \n                               this.startY - ((this.state.lineWeight / 2) + .3),\n                               this.prevWidth - (this.state.lineWeight * 1.63),\n                               this.prevHeight + (this.state.lineWeight * 1.63)); \n          }\n        }\n        else {                                                                              //clear full canvas\n          this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height); \n        }\n\n        this.ctx.beginPath();\n        if (this.state.bFill) {\n          this.ctx.fillStyle = this.state.fillColor;\n          this.ctx.fillRect(this.startX, this.startY, pos.x - this.startX, pos.y - this.startY);\n        }\n        else {\n          this.ctx.rect(this.startX, this.startY, pos.x - this.startX, pos.y - this.startY);\n          this.ctx.strokeStyle = this.state.color;\n          this.ctx.lineWidth = this.state.lineWeight;\n          this.ctx.stroke();\n        }\n        this.prevWidth = pos.x - this.startX\n        this.prevHeight = pos.y - this.startY\n      }\n    }\n    else if (this.state.mode === 'erase') {\n      if (e.buttons !== 1) { \n        return;\n      }\n      let pos = this.getCurrentMousePos(e);\n      this.ctx.clearRect(pos.x - 15, pos.y - 15, 30, 30);\n    }\n  }\n\n  onLineSelect = (line) => {\n    this.setState({lineWeight: line})\n  }\n\n  onColorSelect = (color) => {\n    let colorHex;\n    if (color === 'red') {\n      colorHex = '#ff0000';\n    }\n    else if (color === 'green') {\n      colorHex = '#00ff00';\n    }\n    else if (color === 'blue') {\n      colorHex = '#0000ff';\n    }\n    else {\n      colorHex = '#000000';\n    }\n    this.setState({color: colorHex})\n  }\n\n  onFillSelect = (color) => {\n    let colorHex;\n    let bFill = false;\n    if (color === 'red') {\n      colorHex = '#ff0000';\n      bFill = true;\n    }\n    else if (color === 'green') {\n      colorHex = '#00ff00';\n      bFill = true;\n    }\n    else if (color === 'blue') {\n      colorHex = '#0000ff';\n      bFill = true;\n    }\n    else {\n      colorHex = '#ffffff';\n    }\n    this.setState({fillColor: colorHex, bFill: bFill})\n  }\n\n  onPencilMode = () => {\n    this.setState({mode: 'pencil'})\n  }\n\n  onRectangleMode = () => {\n    if (!this.state.bugMode) {\n      this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height); //clear canvas\n    }\n    this.setState({mode: 'rectangle'})\n  }\n\n  onEraseMode = () => {\n    this.setState({mode: 'erase'})\n  }\n\n  onClear = () => {\n    this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height); //clear canvas\n  }\n\n  onBugMode = (e) => {\n    this.setState({bugMode: !this.state.bugMode});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n     \n        <span id='titleSpan'><img style={{marginTop: '10px', paddingRight: '30px'}} src={process.env.PUBLIC_URL + '/paintpallet4.png'} alt='oops'></img><h2 style={{display: 'inline'}} id='titleDiv'>Winnetka Paint Works!</h2></span>\n        <div id='mainDiv'>\n          <canvas ref='canvas' onMouseDown={this.onMouseDown} onMouseMove={this.draw} onMouseUp={this.mouseUp} className={this.state.mode === 'erase' ? 'eraseCursor' : 'defaultCursor'}></canvas> \n          <div id='controlsDiv'>\n\n            <div id='modeDiv'>\n              <ul id='modeList'>\n                <li>\n                  <button className={'modeButton ' + (this.state.mode === 'pencil' ? 'modeSelected' : '')} onClick={this.onPencilMode}>Pencil</button>\n                </li>\n                <li>\n                  <button className={'modeButton ' + (this.state.mode === 'rectangle' ? 'modeSelected' : '')} onClick={this.onRectangleMode}>Rectangle</button>\n                </li>\n                <li>\n                  <button className={'modeButton ' + (this.state.mode === 'erase' ? 'modeSelected' : '')} onClick={this.onEraseMode}>Erase</button>\n                </li>\n                <li>\n                  <button className='modeButton' onClick={this.onClear} style={{marginTop: '20px'}}>Clear</button>\n                </li>\n              </ul>\n            </div>\n\n            <div id='lineWeightDiv'>\n              <div style={{marginBottom: '5px', marginLeft: '65px', textAlign: 'left'}}>Line width: {lineMap[this.state.lineWeight]}</div>\n              <ul style={{display: 'inline', paddingLeft: '5px'}}>\n                <li style={{display: 'inline'}}>\n                  <button className={'lineButton ' +  (this.state.lineWeight === 1 ? 'lineSelected' : '')}  onClick={() => this.onLineSelect(1)}>1</button>\n                </li>\n                <li style={{display: 'inline'}}>\n                  <button className={'lineButton ' +  (this.state.lineWeight === 3 ? 'lineSelected' : '')}   onClick={() => this.onLineSelect(3)}>2</button>\n                </li>\n                <li style={{display: 'inline'}}>\n                  <button className={'lineButton ' +  (this.state.lineWeight === 7 ? 'lineSelected' : '')}   onClick={() => this.onLineSelect(7)}>3</button>\n                </li>\n                <li style={{display: 'inline'}}>\n                  <button className={'lineButton ' +  (this.state.lineWeight === 12 ? 'lineSelected' : '')}  onClick={() => this.onLineSelect(12)}>4</button>\n                </li>\n              </ul>\n            </div>\n\n            {/* {this.state.color} */}\n            <div id='colorDiv'>\n              <div style={{marginBottom: '5px', marginLeft: '65px', textAlign: 'left'}}>Line color: {colorMap[this.state.color]}</div>\n              <ul style={{display: 'inline'}}>\n                <li style={{display: 'inline'}}>\n                  <button className='colorButton' id='colorBlack' onClick={() => this.onColorSelect('black')}></button>\n                </li>\n                <li style={{display: 'inline'}}>\n                  <button className='colorButton' id='colorGreen' onClick={() => this.onColorSelect('green')}></button>\n                </li>\n                <li style={{display: 'inline'}}>\n                  <button className='colorButton' id='colorBlue' onClick={() => this.onColorSelect('blue')}></button>\n                </li>\n                <li style={{display: 'inline'}}>\n                  <button className='colorButton' id='colorRed' onClick={() => this.onColorSelect('red')}></button>\n                </li>\n              </ul>\n            </div>\n\n            <div id='fillDiv'>\n              <div style={{marginBottom: '5px', marginLeft: '65px', textAlign: 'left'}}>Fill color: {colorMap[this.state.fillColor]}</div>\n              <ul style={{display: 'inline'}}>\n                <li style={{display: 'inline'}}>\n                  <button className='colorButton' id='colorWhite' onClick={() => this.onFillSelect('white')}></button>\n                </li>\n                <li style={{display: 'inline'}}>\n                  <button className='colorButton'  id='colorGreen' onClick={() => this.onFillSelect('green')}></button>\n                </li>\n                <li style={{display: 'inline'}}>\n                  <button className='colorButton'  id='colorBlue' onClick={() => this.onFillSelect('blue')}></button>\n                </li>\n                <li style={{display: 'inline'}}>\n                  <button className='colorButton'  id='colorRed' onClick={() => this.onFillSelect('red')}></button>\n                </li>\n              </ul>\n            </div>\n\n            <div id='bugModeDiv'>\n              <div>Bug Mode:</div>\n              <div style={{display: 'inline'}}>\n                <input type='checkbox' onChange={this.onBugMode} value={this.state.bugMode} className='largerCheckbox' ></input>\n              </div>\n            </div>\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}